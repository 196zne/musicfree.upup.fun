import{_ as a,o as d,c,Q as s}from"./chunks/framework.72cf09dc.js";const t="/img/plugin-framework.png";const y=JSON.parse('{"title":"插件机制简介","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"plugin/introduction.md","filePath":"plugin/introduction.md","lastUpdated":1699699609000}'),n={name:"plugin/introduction.md"},o=s('<h1 id="插件机制简介" tabindex="-1" data-v-d68db7cc>插件机制简介 <a class="header-anchor" href="#插件机制简介" aria-label="Permalink to &quot;插件机制简介&quot;" data-v-d68db7cc>​</a></h1><h2 id="概述" tabindex="-1" data-v-d68db7cc>概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>插件机制是本软件的核心。当未安装插件时，本软件可以看作是一个 <strong data-v-d68db7cc>本地的音乐播放器</strong>；当安装插件之后，你便可以为这个播放器 <strong data-v-d68db7cc>扩展你自定义的音源</strong>。本文档便是开发插件的详细教程。</p><p data-v-d68db7cc>软件中的任何和音乐有关的 <strong data-v-d68db7cc> 底层功能 </strong>，包括但不限于播放、搜索、查看专辑信息、查看歌词、导入歌单等，都是基于 <strong data-v-d68db7cc>插件</strong> 实现的。</p><div class="tip custom-block" data-v-d68db7cc><p class="custom-block-title" data-v-d68db7cc>💡</p><p data-v-d68db7cc>因此，如果某个音源存在问题（比如无法播放、没有导入歌单等功能），那大概率是插件有问题。</p></div><p data-v-d68db7cc><strong data-v-d68db7cc>软件会决定在什么时候去调用插件中的某个方法，以及如何处理方法返回的数据</strong>；插件负责根据入参获取或处理特定格式的数据。软件中播放本地音乐功能实际上也是通过加载一个特殊的内置插件实现。</p><div class="img-container" data-v-d68db7cc><img src="'+t+`" data-v-d68db7cc></div><h2 id="前置知识" tabindex="-1" data-v-d68db7cc>前置知识 <a class="header-anchor" href="#前置知识" aria-label="Permalink to &quot;前置知识&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>开发插件前，你需要了解以下知识：</p><ul data-v-d68db7cc><li data-v-d68db7cc>javascript / typescript (ES7 语法)</li><li data-v-d68db7cc>js 模块化规范 (common.js)</li><li data-v-d68db7cc>包管理工具 npm，以及如何使用 npm 包</li><li data-v-d68db7cc>构建工具（webpack、parcel，可选）</li><li data-v-d68db7cc>JSBridge（可选）</li></ul><h2 id="原理" tabindex="-1" data-v-d68db7cc>原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>插件本质上是一个 <strong data-v-d68db7cc>导出特定数据结构</strong> 的 <code data-v-d68db7cc>Common JS 模块</code>。如果你开发过前端项目，并且配置过 <code data-v-d68db7cc>webpack.config.js</code>，你可能会对开发插件的方式感到熟悉。</p><p data-v-d68db7cc>插件中的配置可以大体分为两类：一类是用来说明插件信息的 <strong data-v-d68db7cc>属性</strong>（比如插件名、插件的版本号）；另一类是让软件在合适的时机调用的 <strong data-v-d68db7cc>函数</strong>（比如获取音源的函数等）。</p><p data-v-d68db7cc>在软件中的每一项动作 （如获取音源 URL、搜索等），<strong data-v-d68db7cc>都对应着插件中导出的某个函数</strong> （比如 <code data-v-d68db7cc>获取音源</code> 对应着 <code data-v-d68db7cc>getMediaSource</code> 函数，<code data-v-d68db7cc>搜索</code> 对应着 <code data-v-d68db7cc>search</code> 函数）。</p><p data-v-d68db7cc>一个简单的插件结构如下：</p><div class="language-javascript vp-adaptive-theme" data-v-d68db7cc><button title="Copy Code" class="copy" data-v-d68db7cc></button><span class="lang" data-v-d68db7cc>javascript</span><pre class="shiki github-dark vp-code-dark" data-v-d68db7cc><code data-v-d68db7cc><span class="line" data-v-d68db7cc><span style="color:#79B8FF;" data-v-d68db7cc>module</span><span style="color:#E1E4E8;" data-v-d68db7cc>.</span><span style="color:#79B8FF;" data-v-d68db7cc>exports</span><span style="color:#E1E4E8;" data-v-d68db7cc> </span><span style="color:#F97583;" data-v-d68db7cc>=</span><span style="color:#E1E4E8;" data-v-d68db7cc> {</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>  </span><span style="color:#6A737D;" data-v-d68db7cc>/** 用来说明插件信息的属性 */</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>  platform: </span><span style="color:#9ECBFF;" data-v-d68db7cc>&quot;MusicFree 插件&quot;</span><span style="color:#E1E4E8;" data-v-d68db7cc>, </span><span style="color:#6A737D;" data-v-d68db7cc>// 插件名</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>  version: </span><span style="color:#9ECBFF;" data-v-d68db7cc>&quot;0.0.0&quot;</span><span style="color:#E1E4E8;" data-v-d68db7cc>, </span><span style="color:#6A737D;" data-v-d68db7cc>// 插件版本号</span></span>
<span class="line" data-v-d68db7cc></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>  </span><span style="color:#6A737D;" data-v-d68db7cc>/** 供给软件在合适的时机调用的函数 */</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>  </span><span style="color:#B392F0;" data-v-d68db7cc>getMediaSource</span><span style="color:#E1E4E8;" data-v-d68db7cc>: </span><span style="color:#F97583;" data-v-d68db7cc>function</span><span style="color:#E1E4E8;" data-v-d68db7cc> (</span><span style="color:#FFAB70;" data-v-d68db7cc>musicItem</span><span style="color:#E1E4E8;" data-v-d68db7cc>) {</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>    </span><span style="color:#6A737D;" data-v-d68db7cc>// 根据该音源的某个音乐获取真实的播放地址</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>    </span><span style="color:#F97583;" data-v-d68db7cc>return</span><span style="color:#E1E4E8;" data-v-d68db7cc> {</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>      url: </span><span style="color:#9ECBFF;" data-v-d68db7cc>&quot;https://&quot;</span><span style="color:#E1E4E8;" data-v-d68db7cc>, </span><span style="color:#6A737D;" data-v-d68db7cc>// 音源 URL</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>    };</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>  },</span></span>
<span class="line" data-v-d68db7cc><span style="color:#E1E4E8;" data-v-d68db7cc>};</span></span></code></pre><pre class="shiki github-light vp-code-light" data-v-d68db7cc><code data-v-d68db7cc><span class="line" data-v-d68db7cc><span style="color:#005CC5;" data-v-d68db7cc>module</span><span style="color:#24292E;" data-v-d68db7cc>.</span><span style="color:#005CC5;" data-v-d68db7cc>exports</span><span style="color:#24292E;" data-v-d68db7cc> </span><span style="color:#D73A49;" data-v-d68db7cc>=</span><span style="color:#24292E;" data-v-d68db7cc> {</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>  </span><span style="color:#6A737D;" data-v-d68db7cc>/** 用来说明插件信息的属性 */</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>  platform: </span><span style="color:#032F62;" data-v-d68db7cc>&quot;MusicFree 插件&quot;</span><span style="color:#24292E;" data-v-d68db7cc>, </span><span style="color:#6A737D;" data-v-d68db7cc>// 插件名</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>  version: </span><span style="color:#032F62;" data-v-d68db7cc>&quot;0.0.0&quot;</span><span style="color:#24292E;" data-v-d68db7cc>, </span><span style="color:#6A737D;" data-v-d68db7cc>// 插件版本号</span></span>
<span class="line" data-v-d68db7cc></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>  </span><span style="color:#6A737D;" data-v-d68db7cc>/** 供给软件在合适的时机调用的函数 */</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>  </span><span style="color:#6F42C1;" data-v-d68db7cc>getMediaSource</span><span style="color:#24292E;" data-v-d68db7cc>: </span><span style="color:#D73A49;" data-v-d68db7cc>function</span><span style="color:#24292E;" data-v-d68db7cc> (</span><span style="color:#E36209;" data-v-d68db7cc>musicItem</span><span style="color:#24292E;" data-v-d68db7cc>) {</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>    </span><span style="color:#6A737D;" data-v-d68db7cc>// 根据该音源的某个音乐获取真实的播放地址</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>    </span><span style="color:#D73A49;" data-v-d68db7cc>return</span><span style="color:#24292E;" data-v-d68db7cc> {</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>      url: </span><span style="color:#032F62;" data-v-d68db7cc>&quot;https://&quot;</span><span style="color:#24292E;" data-v-d68db7cc>, </span><span style="color:#6A737D;" data-v-d68db7cc>// 音源 URL</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>    };</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>  },</span></span>
<span class="line" data-v-d68db7cc><span style="color:#24292E;" data-v-d68db7cc>};</span></span></code></pre></div><p data-v-d68db7cc>关于插件在代码中的实现细节可以 <a href="https://mp.weixin.qq.com/s/pjyOjTDrV85ImRQ6EWbgAg" target="_blank" rel="noreferrer" data-v-d68db7cc>参考这里</a>。桌面版的实现机制和安卓版略有差异，但基本原理相同。</p><p data-v-d68db7cc>已安装的插件实际上是被拷贝到了固定路径，安卓是 <code data-v-d68db7cc>Android/data/fun.upup.musicfree/files/plugins</code>；桌面端是 <code data-v-d68db7cc>C://Users/{userName}/AppData/Roaming/MusicFree/musicfree-plugins</code>。每次启动应用时，都会从对应路径下扫描并加载插件。</p><h2 id="生命周期" tabindex="-1" data-v-d68db7cc>生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>插件在被加载或软件启动时，会自动执行插件函数的函数体，并将插件的模块导出（module.exports）作为插件的实例。</p><p data-v-d68db7cc>插件实例和插件中的数据会在软件的生命周期内<strong data-v-d68db7cc>持续存在</strong>，直至软件或者插件被卸载。</p><h2 id="插件的性能" tabindex="-1" data-v-d68db7cc>插件的性能 <a class="header-anchor" href="#插件的性能" aria-label="Permalink to &quot;插件的性能&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>插件执行的上下文和软件内（无论是桌面版还是安卓版） Javascript 代码执行的上下文相同，因此性能方面理论上和软件内直接写死源 <strong data-v-d68db7cc>无差别</strong>。</p><div class="danger custom-block" data-v-d68db7cc><p class="custom-block-title" data-v-d68db7cc>DANGER</p><p data-v-d68db7cc>也正因如此，插件内有可能会有些破坏软件本体执行的逻辑，因此插件的使用者需要谨慎识别插件的来源。</p></div><details class="details custom-block" data-v-d68db7cc><summary data-v-d68db7cc>为什么要这样设计？</summary><p data-v-d68db7cc>尽管在安全性上有弱点，但是这样做没有额外的序列化和反序列化步骤，性能会好一点点；同时设计之初以技术探索为主，没有太多安全性上的考虑。</p><p data-v-d68db7cc>再者，插件是用 javascript 编写，简单看一下插件内容也能大概判断插件的安全性，因此暂时保持这样的设计，后续如果有需求再逐渐完善。</p></details><h2 id="如何开发插件" tabindex="-1" data-v-d68db7cc>如何开发插件 <a class="header-anchor" href="#如何开发插件" aria-label="Permalink to &quot;如何开发插件&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>对于开发方式没有限制，你只需要保证最终生成一个 <code data-v-d68db7cc>导出 MusicFree 协议</code> 的 <code data-v-d68db7cc>Common.js</code> 模块即可。</p><p data-v-d68db7cc>方便起见，你可以按照 <a href="https://github.com/maotoumao/MusicFreePluginTemplate" target="_blank" rel="noreferrer" data-v-d68db7cc>此模板</a> 完善插件。开发完成后，执行：</p><div class="language-bash vp-adaptive-theme" data-v-d68db7cc><button title="Copy Code" class="copy" data-v-d68db7cc></button><span class="lang" data-v-d68db7cc>bash</span><pre class="shiki github-dark vp-code-dark" data-v-d68db7cc><code data-v-d68db7cc><span class="line" data-v-d68db7cc><span style="color:#B392F0;" data-v-d68db7cc>npm</span><span style="color:#E1E4E8;" data-v-d68db7cc> </span><span style="color:#9ECBFF;" data-v-d68db7cc>run</span><span style="color:#E1E4E8;" data-v-d68db7cc> </span><span style="color:#9ECBFF;" data-v-d68db7cc>build</span></span></code></pre><pre class="shiki github-light vp-code-light" data-v-d68db7cc><code data-v-d68db7cc><span class="line" data-v-d68db7cc><span style="color:#6F42C1;" data-v-d68db7cc>npm</span><span style="color:#24292E;" data-v-d68db7cc> </span><span style="color:#032F62;" data-v-d68db7cc>run</span><span style="color:#24292E;" data-v-d68db7cc> </span><span style="color:#032F62;" data-v-d68db7cc>build</span></span></code></pre></div><p data-v-d68db7cc>安装 <code data-v-d68db7cc>dist/plugin.js</code> 即可。</p><p data-v-d68db7cc>除了使用模板外，你也可以基于 <a href="https://github.com/maotoumao/MusicFreePlugins" target="_blank" rel="noreferrer" data-v-d68db7cc>示例插件</a> 修改。示例插件仓库最终的可安装文件在 <code data-v-d68db7cc>dist</code> 文件夹下。</p><h2 id="如何调试插件" tabindex="-1" data-v-d68db7cc>如何调试插件 <a class="header-anchor" href="#如何调试插件" aria-label="Permalink to &quot;如何调试插件&quot;" data-v-d68db7cc>​</a></h2><p data-v-d68db7cc>前面说过，插件本质上是一个导出特定数据结构的 <code data-v-d68db7cc>Common JS 模块</code>。如果需要调试插件，你只需要在 node.js 环境下调用对应的函数，判断函数的返回值是否符合预期即可。</p><div class="warning custom-block" data-v-d68db7cc><p class="custom-block-title" data-v-d68db7cc>WARNING</p><p data-v-d68db7cc>如果使用到 <code data-v-d68db7cc>@react-native-cookies/cookies</code>，无法直接在 node.js 环境下调试，因为这个包有一些原生依赖。如果需要调试，需要启动 MusicFree 项目，并在软件内调试。</p></div><div class="danger custom-block" data-v-d68db7cc><p class="custom-block-title" data-v-d68db7cc>DANGER</p><p data-v-d68db7cc>同样需要注意，插件内可以引入第三方库 (比如你想在插件中使用 lodash 等)，但插件内只能引入 <span style="color:var(--vp-c-danger-1);" data-v-d68db7cc>纯 Javascript 库</span>，如果第三方库存在一些原生依赖，则无法使用。</p></div><hr data-v-d68db7cc><p data-v-d68db7cc>接下来，你可以简单阅读一下 <a href="/plugin/basic-type.html" data-v-d68db7cc>基本媒体类型</a> 一节，大概了解一下插件内部的一些通用的数据结构，然后就可以根据插件协议开发了。</p>`,37),p=[o];function l(e,b,r,v,i,u){return d(),c("div",null,p)}const h=a(n,[["render",l],["__scopeId","data-v-d68db7cc"]]);export{y as __pageData,h as default};
